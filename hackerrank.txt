
********************************** HackerRank CamelCase  *************************************************************
1. 
Alice wrote a sequence of words in CamelCase as a string of letters, , having the following properties:

It is a concatenation of one or more words consisting of English letters.
All letters in the first word are lowercase.
For each of the subsequent words, the first letter is uppercase and rest of the letters are lowercase.
Given s, print the number of words in s on a new line.

sample input: saveChangesInTheEditor
sample output: 5

*********  made 1 mistake:  forgot to add remaining char to the list *******

#!/bin/python

import sys


s = raw_input().strip()

# detect the fist occurence of Capital letter
# word = then until the next occurence of capital letter

count = 0
word_list = []
upper_letter =['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
counter = 0
for idx, char in enumerate(s):

    if char in upper_letter:
        word_list.append(s[counter:idx])
        counter = idx
#print word_list
# add the remaining char
word_list.append(s[idx:])
print len(word_list)

********************************** *************************************************************

2. 
Alice is taking a cryptography class and finding anagrams to be very useful. We consider two strings to be anagrams of each other if the first string's letters can be rearranged to form the second string. In other words, both strings must contain the same exact letters in the same exact frequency For example, bacdc and dcbac are anagrams, but bacdc and dcbad are not.

Alice decides on an encryption scheme involving two large strings where encryption is dependent on the minimum number of character deletions required to make the two strings anagrams. Can you help her find this number?

Given two strings, a and b, that may or may not be of the same length, determine the minimum number of character deletions required to make  and  anagrams. Any characters can be deleted from either of the strings.

This challenge is also available in the following translations:

Chinese
Russian
Input Format

The first line contains a single string, a. 
The second line contains a single string, b.

Constraints

It is guaranteed that a and b consist of lowercase English alphabetic letters (i.e., a through z).
Output Format

Print a single integer denoting the number of characters you must delete to make the two strings anagrams of each other.

Sample Input

cde
abc
Sample Output

4
Explanation

We delete the following characters from our two strings to turn them into anagrams of each other:

Remove d and e from cde to get c.
Remove a and b from abc to get c.
We must delete 4 characters to make both strings anagrams, so we print 4 on a new line.

def number_needed(a, b):
    # we should go through both strings, keep track of the # of letter using a dict
    # then compare the difference

    dict_a = {}
    dict_b = {}

    for char in a:
    	# char already in dict
    	if char in dict_a.keys():
    		dict_a[char] += 1
    	else:
    		dict_a[char] = 1

    for char in b:
    	if char in dict_b.keys():
    		dict_b[char] += 1
    	else:
    		dict_b[char] = 1

    count = 0

    # sort the dicts so the keys are alphabetical order
    for char_a, char_b in zip(sorted(dict_a).keys(), sorted(dict_b).keys()):
    	if dict_a[char_a] != dict_b[char_b]:

    		count = abs(dict_a[char_a]-dict_b[char_b])

    return count

a = raw_input().strip()
b = raw_input().strip()

print number_needed(a, b)



********************************  Day 7 ********************************

# No mistake !!

#!/bin/python

import sys


n = int(raw_input().strip())
arr = map(int,raw_input().strip().split(' '))

# ideas:
# iterate thru the list backward
# create an empty string
# add the element to the list
# make sure to cast the num to str()
# account for last element in the array
result_str = ""

for idx, char in enumerate(arr[::-1]):
	# last element in the array
	if idx == n:
		result_str += str(char)
		
	else:
		result_str += str(char)
		result_str += " "

print result_str
