
********************************** HackerRank CamelCase  *************************************************************
1. 
Alice wrote a sequence of words in CamelCase as a string of letters, , having the following properties:

It is a concatenation of one or more words consisting of English letters.
All letters in the first word are lowercase.
For each of the subsequent words, the first letter is uppercase and rest of the letters are lowercase.
Given s, print the number of words in s on a new line.

sample input: saveChangesInTheEditor
sample output: 5

*********  made 1 mistake:  forgot to add remaining char to the list *******

#!/bin/python

import sys


s = raw_input().strip()

# detect the fist occurence of Capital letter
# word = then until the next occurence of capital letter

count = 0
word_list = []
upper_letter =['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
counter = 0
for idx, char in enumerate(s):

    if char in upper_letter:
        word_list.append(s[counter:idx])
        counter = idx
#print word_list
# add the remaining char
word_list.append(s[idx:])
print len(word_list)

********************************** *************************************************************

2. 
Alice is taking a cryptography class and finding anagrams to be very useful. We consider two strings to be anagrams of each other if the first string's letters can be rearranged to form the second string. In other words, both strings must contain the same exact letters in the same exact frequency For example, bacdc and dcbac are anagrams, but bacdc and dcbad are not.

Alice decides on an encryption scheme involving two large strings where encryption is dependent on the minimum number of character deletions required to make the two strings anagrams. Can you help her find this number?

Given two strings, a and b, that may or may not be of the same length, determine the minimum number of character deletions required to make  and  anagrams. Any characters can be deleted from either of the strings.

This challenge is also available in the following translations:

Chinese
Russian
Input Format

The first line contains a single string, a. 
The second line contains a single string, b.

Constraints

It is guaranteed that a and b consist of lowercase English alphabetic letters (i.e., a through z).
Output Format

Print a single integer denoting the number of characters you must delete to make the two strings anagrams of each other.

Sample Input

cde
abc
Sample Output

4
Explanation

We delete the following characters from our two strings to turn them into anagrams of each other:

Remove d and e from cde to get c.
Remove a and b from abc to get c.
We must delete 4 characters to make both strings anagrams, so we print 4 on a new line.

def number_needed(a, b):
    # we should go through both strings, keep track of the # of letter using a dict
    # then compare the difference

    dict_a = {}
    dict_b = {}

    for char in a:
    	# char already in dict
    	if char in dict_a.keys():
    		dict_a[char] += 1
    	else:
    		dict_a[char] = 1

    for char in b:
    	if char in dict_b.keys():
    		dict_b[char] += 1
    	else:
    		dict_b[char] = 1

    count = 0

    # sort the dicts so the keys are alphabetical order
    for char_a, char_b in zip(sorted(dict_a).keys(), sorted(dict_b).keys()):
    	if dict_a[char_a] != dict_b[char_b]:

    		count = abs(dict_a[char_a]-dict_b[char_b])

    return count

a = raw_input().strip()
b = raw_input().strip()

print number_needed(a, b)



********************************  Day 7 ********************************

# No mistake !!

#!/bin/python

import sys


n = int(raw_input().strip())
arr = map(int,raw_input().strip().split(' '))

# ideas:
# iterate thru the list backward
# create an empty string
# add the element to the list
# make sure to cast the num to str()
# account for last element in the array
result_str = ""

for idx, char in enumerate(arr[::-1]):
	# last element in the array
	if idx == n:
		result_str += str(char)
		
	else:
		result_str += str(char)
		result_str += " "

print result_str

********************************  Day 8 **************************

#  watch out for correct var name + how to declare defaultdict

# Enter your code here. Read input from STDIN. Print output to STDOUT

# mistake: runtime error  (not reading question correctly since # of queries is UNKNOWN, use while loop instead)
# mistake 2: use try/except EOFError then break

#  Sample Input

3
sam 99912222
tom 11122222
harry 12299933
sam
edward
harry

# Sample Output

sam=99912222
Not found
harry=12299933

# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import defaultdict
n = int(raw_input().strip())
dict_phone = defaultdict(int)

query_list = []

for i in range(0,n):
    name, phone = raw_input().split(' ')

    dict_phone[name] = phone
'''
while 1:
	line = input('').strip()
	if len(line) > 0:
		query_list.append(line)
	else:
		break
'''
#print dict_phone
while True:
    try:
        line = raw_input('').strip()

        query_list.append(line)
 
    except EOFError:
        break

for j in query_list:
    #name = raw_input().strip()
    if j in dict_phone:
        print (j+"="+dict_phone[j])
    else:
        print ("Not found")

**********************  Day 10 *********************
Task 
Given a base-10 integer, n, convert it to binary (base-2). Then find and print the base- integer denoting 
the maximum number of consecutive 1's in n's binary representation.

input:  n
output: Print a single base-10 integer denoting the maximum number of consecutive 1's in the binary representation of n.

input: 5
output :1

input: 13
ouput: 2

ideas:  convert it to binary (use modulo), then cast it to a string, 
5 - 4*1 + 2*0 + 1*1 = 101
13 - 8+4+2 - 8*1 + 4*1 + 0*1 = 1101 = 2

17 - 8*1 + 

13/2 = 6 13%2 = 1


**********************  Day 12 - Inheritance *********

class Person:
	def __init__(self, firstName, lastName, idNumber):
		self.firstName = firstName
		self.lastName = lastName
		self.idNumber = idNumber
	def printPerson(self):
		print "Name:", self.lastName + ",", self.firstName
		print "ID:", self.idNumber

# mistake 1: super().__init__(firstName, lastName, id)
# mistake 2: AttributeError: Student instance has no attribute 'scores'

class Student(Person):

    #   Class Constructor
    #   
    #   Parameters:
    #   firstName - A string denoting the Person's first name.
    #   lastName - A string denoting the Person's last name.
    #   id - An integer denoting the Person's ID number.
    #   scores - An array of integers denoting the Person's test scores.
    #
    # Write your constructor here
    def __init__(self, firstName, lastName, id, scores):
        #super(Person, self).__init__(firstName, lastName, id)
        Person.__init__(self, firstName, lastName, id)
        self.scores = scores

    #   Function Name: calculate
    #   Return: A character denoting the grade.
    #
    # Write your function here
    def calculate(self):
        result = None
        avg_score = 0
        total_score = 0
        #print "what is scores..", self.scores
        
        for s in self.scores:
            total_score += s
        
        avg_score = total_score / len(self.scores)
        
        #self.scores = self.scores/len(scores)
        
        if avg_score >= 90 and avg_score <= 100:
            result = "O"
        if avg_score >= 80 and avg_score < 90:
            result = "E"
        if avg_score >= 70 and avg_score < 80:
            result = "A"
        if avg_score >= 55 and avg_score < 70:
            result = "P"
        if avg_score >= 40 and avg_score < 55:
            result = "D"
        if avg_score < 40:
            result = "T"
        return result
    

# ******************  Day 16 Exceptions - String to Integer *******************
'''
Task: Read a string, , and print its integer value; if  cannot be converted to an integer, print Bad String.
'''

#!/bin/python

import sys


S = raw_input().strip()

try:
    print int(S)

except:
    print "Bad String"
    
# ***************** Day 17 Exceptions ***************************************
'''
Task: Write a Calculator class with a single method: int power(int,int). 
The power method takes two integers,  and , as parameters and returns the integer result of . 
If either  or  is negative, then the method must throw an exception with the message: n and p should be non-negative.

mistake 1: forgot operator of a to the power of b (a**b)
mistake 2: forgot self in class method
'''

#Write your code here
class Calculator():
    def power(self, a, b):
        # If either  or  is negative, 
        # then the method must throw an exception 
        # with the message: n and p should be non-negative.

        if a < 0 or b < 0:
            raise Exception("n and p should be non-negative")
        else:
            return a**b

myCalculator=Calculator()
T=int(raw_input())
for i in range(T):
    n,p = map(int, raw_input().split())
    try:
        ans=myCalculator.power(n,p)
        print ans
    except Exception,e:
        print e    
